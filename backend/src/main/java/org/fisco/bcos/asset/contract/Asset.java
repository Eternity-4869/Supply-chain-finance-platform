package org.fisco.bcos.asset.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Asset extends Contract {
    public static String BINARY = "60806040523480156200001157600080fd5b50620000cd6040805190810160405280600c81526020017f4143434f554e545f4c49535400000000000000000000000000000000000000008152506040805190810160405280600781526020017f6163636f756e74000000000000000000000000000000000000000000000000008152506040805190810160405280600881526020017f62616c616e636573000000000000000000000000000000000000000000000000815250620000d3640100000000026401000000009004565b620002d6565b600061100190508073ffffffffffffffffffffffffffffffffffffffff166356004b6a8585856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156200016e57808201518184015260208101905062000151565b50505050905090810190601f1680156200019c5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015620001d7578082015181840152602081019050620001ba565b50505050905090810190601f168015620002055780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156200024057808201518184015260208101905062000223565b50505050905090810190601f1680156200026e5780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1580156200029257600080fd5b505af1158015620002a7573d6000803e3d6000fd5b505050506040513d6020811015620002be57600080fd5b81019080805190602001909291905050505050505050565b613d4780620002e66000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063658e62981461007d5780638aa6b3a51461014a578063af1c51e2146101ce578063f0c4aff114610255578063f63fd6d9146102d6578063f66abce7146103a0575b600080fd5b34801561008957600080fd5b50610134600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610463565b6040518082815260200191505060405180910390f35b34801561015657600080fd5b506101b1600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610ecb565b604051808381526020018281526020019250505060405180910390f35b3480156101da57600080fd5b5061023f600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050611368565b6040518082815260200191505060405180910390f35b34801561026157600080fd5b506102bc600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611909565b604051808215151515815260200191505060405180910390f35b3480156102e257600080fd5b50610383600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611bf3565b604051808381526020018281526020019250505060405180910390f35b3480156103ac57600080fd5b5061044d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612095565b6040518082815260200191505060405180910390f35b600080600080600080935061047787611909565b8015610488575061048788611909565b5b15610e6257610496886139ff565b92508273ffffffffffffffffffffffffffffffffffffffff1663e8434e39888573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561051957600080fd5b505af115801561052d573d6000803e3d6000fd5b505050506040513d602081101561054357600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156105f15780820151818401526020810190506105d6565b50505050905090810190601f16801561061e5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561063e57600080fd5b505af1158015610652573d6000803e3d6000fd5b505050506040513d602081101561066857600080fd5b8101908080519060200190929190505050915060008273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156106e157600080fd5b505af11580156106f5573d6000803e3d6000fd5b505050506040513d602081101561070b57600080fd5b8101908080519060200190929190505050141515610a8f578173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561079357600080fd5b505af11580156107a7573d6000803e3d6000fd5b505050506040513d60208110156107bd57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f616d6f756e740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561086d57600080fd5b505af1158015610881573d6000803e3d6000fd5b505050506040513d602081101561089757600080fd5b8101908080519060200190929190505050860195508273ffffffffffffffffffffffffffffffffffffffff166328bb2117888573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561092d57600080fd5b505af1158015610941573d6000803e3d6000fd5b505050506040513d602081101561095757600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610a055780820151818401526020810190506109ea565b50505050905090810190601f168015610a325780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b505050506040513d6020811015610a7c57600080fd5b8101908080519060200190929190505050505b8273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610af357600080fd5b505af1158015610b07573d6000803e3d6000fd5b505050506040513d6020811015610b1d57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f626f72726f776572000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015610bf0578082015181840152602081019050610bd5565b50505050905090810190601f168015610c1d5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f616d6f756e74000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015610cfd57600080fd5b505af1158015610d11573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac3688836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610dd0578082015181840152602081019050610db5565b50505050905090810190601f168015610dfd5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610e1d57600080fd5b505af1158015610e31573d6000803e3d6000fd5b505050506040513d6020811015610e4757600080fd5b81019080805190602001909291905050505060009350610e86565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93505b7fdddc6f3a61ff7423dd6b37b6fa18fe1abf7985625848a1aa6046d07e7a4092af846040518082815260200191505060405180910390a1839450505050509392505050565b600080600080600080610f126040805190810160405280600c81526020017f4143434f554e545f4c49535400000000000000000000000000000000000000008152506139ff565b93508373ffffffffffffffffffffffffffffffffffffffff1663e8434e39888673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f9557600080fd5b505af1158015610fa9573d6000803e3d6000fd5b505050506040513d6020811015610fbf57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561106d578082015181840152602081019050611052565b50505050905090810190601f16801561109a5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156110ba57600080fd5b505af11580156110ce573d6000803e3d6000fd5b505050506040513d60208110156110e457600080fd5b810190808051906020019092919050505092506000915060008373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561116157600080fd5b505af1158015611175573d6000803e3d6000fd5b505050506040513d602081101561118b57600080fd5b810190808051906020019092919050505014156111cd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff829550955061135f565b8273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561123d57600080fd5b505af1158015611251573d6000803e3d6000fd5b505050506040513d602081101561126757600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f62616c616e636573000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561131c57600080fd5b505af1158015611330573d6000803e3d6000fd5b505050506040513d602081101561134657600080fd5b8101908080519060200190929190505050819150955095505b50505050915091565b600080600080600080935061137c87611909565b151561183d576113c06040805190810160405280600c81526020017f4143434f554e545f4c49535400000000000000000000000000000000000000008152506139ff565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561142657600080fd5b505af115801561143a573d6000803e3d6000fd5b505050506040513d602081101561145057600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015611523578082015181840152602081019050611508565b50505050905090810190601f1680156115505780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260088152602001807f62616c616e63657300000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561163057600080fd5b505af1158015611644573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac3688846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156117035780820151818401526020810190506116e8565b50505050905090810190601f1680156117305780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561175057600080fd5b505af1158015611764573d6000803e3d6000fd5b505050506040513d602081101561177a57600080fd5b8101908080519060200190929190505050905060018114156118145761180b876040805190810160405280600881526020017f626f72726f7765720000000000000000000000000000000000000000000000008152506040805190810160405280600681526020017f616d6f756e740000000000000000000000000000000000000000000000000000815250613b24565b60009350611838565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93505b611861565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93505b85876040518082805190602001908083835b6020831015156118985780518252602082019150602081019050602083039250611873565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f0bbad4483ea85dd033861f22c652cd4b5ef6352e949ada77273e10aa353f8e34866040518082815260200191505060405180910390a38394505050505092915050565b60008060008061194d6040805190810160405280600c81526020017f4143434f554e545f4c49535400000000000000000000000000000000000000008152506139ff565b92508273ffffffffffffffffffffffffffffffffffffffff1663e8434e39868573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156119d057600080fd5b505af11580156119e4573d6000803e3d6000fd5b505050506040513d60208110156119fa57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611aa8578082015181840152602081019050611a8d565b50505050905090810190601f168015611ad55780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611af557600080fd5b505af1158015611b09573d6000803e3d6000fd5b505050506040513d6020811015611b1f57600080fd5b810190808051906020019092919050505091506000905060008273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611b9c57600080fd5b505af1158015611bb0573d6000803e3d6000fd5b505050506040513d6020811015611bc657600080fd5b81019080805190602001909291905050501415611be65760009350611beb565b600193505b505050919050565b6000806000806000806000935060009250611c0d88611909565b1561206057611c1b886139ff565b91508173ffffffffffffffffffffffffffffffffffffffff1663e8434e39888473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c9e57600080fd5b505af1158015611cb2573d6000803e3d6000fd5b505050506040513d6020811015611cc857600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611d76578082015181840152602081019050611d5b565b50505050905090810190601f168015611da35780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611dc357600080fd5b505af1158015611dd7573d6000803e3d6000fd5b505050506040513d6020811015611ded57600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611e6657600080fd5b505af1158015611e7a573d6000803e3d6000fd5b505050506040513d6020811015611e9057600080fd5b81019080805190602001909291905050501415611ecf577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe935061205b565b600093508073ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611f4357600080fd5b505af1158015611f57573d6000803e3d6000fd5b505050506040513d6020811015611f6d57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f616d6f756e740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561201d57600080fd5b505af1158015612031573d6000803e3d6000fd5b505050506040513d602081101561204757600080fd5b810190808051906020019092919050505092505b612084565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93505b838395509550505050509250929050565b600080600080600080600080600080600098506120b18b611909565b80156120c257506120c18c611909565b5b15613992576120d08c6139ff565b97508773ffffffffffffffffffffffffffffffffffffffff1663e8434e398c8a73ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561215357600080fd5b505af1158015612167573d6000803e3d6000fd5b505050506040513d602081101561217d57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561222b578082015181840152602081019050612210565b50505050905090810190601f1680156122585780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561227857600080fd5b505af115801561228c573d6000803e3d6000fd5b505050506040513d60208110156122a257600080fd5b8101908080519060200190929190505050965060008773ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561231b57600080fd5b505af115801561232f573d6000803e3d6000fd5b505050506040513d602081101561234557600080fd5b81019080805190602001909291905050501415612384577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe985061398d565b6123c26040805190810160405280600c81526020017f4143434f554e545f4c49535400000000000000000000000000000000000000008152506139ff565b95508573ffffffffffffffffffffffffffffffffffffffff1663e8434e398c8873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561244557600080fd5b505af1158015612459573d6000803e3d6000fd5b505050506040513d602081101561246f57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561251d578082015181840152602081019050612502565b50505050905090810190601f16801561254a5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561256a57600080fd5b505af115801561257e573d6000803e3d6000fd5b505050506040513d602081101561259457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561261457600080fd5b505af1158015612628573d6000803e3d6000fd5b505050506040513d602081101561263e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f62616c616e636573000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156126ee57600080fd5b505af1158015612702573d6000803e3d6000fd5b505050506040513d602081101561271857600080fd5b810190808051906020019092919050505094508573ffffffffffffffffffffffffffffffffffffffff1663e8434e398d8873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156127ac57600080fd5b505af11580156127c0573d6000803e3d6000fd5b505050506040513d60208110156127d657600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015612884578082015181840152602081019050612869565b50505050905090810190601f1680156128b15780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156128d157600080fd5b505af11580156128e5573d6000803e3d6000fd5b505050506040513d60208110156128fb57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561297b57600080fd5b505af115801561298f573d6000803e3d6000fd5b505050506040513d60208110156129a557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f62616c616e636573000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015612a5557600080fd5b505af1158015612a69573d6000803e3d6000fd5b505050506040513d6020811015612a7f57600080fd5b810190808051906020019092919050505093508673ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015612b0257600080fd5b505af1158015612b16573d6000803e3d6000fd5b505050506040513d6020811015612b2c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f616d6f756e740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015612bdc57600080fd5b505af1158015612bf0573d6000803e3d6000fd5b505050506040513d6020811015612c0657600080fd5b8101908080519060200190929190505050925082851215612c49577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd985061398c565b8773ffffffffffffffffffffffffffffffffffffffff166328bb21178c8a73ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612cca57600080fd5b505af1158015612cde573d6000803e3d6000fd5b505050506040513d6020811015612cf457600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015612da2578082015181840152602081019050612d87565b50505050905090810190601f168015612dcf5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015612def57600080fd5b505af1158015612e03573d6000803e3d6000fd5b505050506040513d6020811015612e1957600080fd5b8101908080519060200190929190505050508573ffffffffffffffffffffffffffffffffffffffff166328bb21178c8873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612eac57600080fd5b505af1158015612ec0573d6000803e3d6000fd5b505050506040513d6020811015612ed657600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015612f84578082015181840152602081019050612f69565b50505050905090810190601f168015612fb15780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015612fd157600080fd5b505af1158015612fe5573d6000803e3d6000fd5b505050506040513d6020811015612ffb57600080fd5b8101908080519060200190929190505050508573ffffffffffffffffffffffffffffffffffffffff166328bb21178d8873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561308e57600080fd5b505af11580156130a2573d6000803e3d6000fd5b505050506040513d60208110156130b857600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561316657808201518184015260208101905061314b565b50505050905090810190601f1680156131935780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156131b357600080fd5b505af11580156131c7573d6000803e3d6000fd5b505050506040513d60208110156131dd57600080fd5b8101908080519060200190929190505050508573ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561325357600080fd5b505af1158015613267573d6000803e3d6000fd5b505050506040513d602081101561327d57600080fd5b810190808051906020019092919050505091508573ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156132f457600080fd5b505af1158015613308573d6000803e3d6000fd5b505050506040513d602081101561331e57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156133f15780820151818401526020810190506133d6565b50505050905090810190601f16801561341e5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561343e57600080fd5b505af1158015613452573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748487036040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260088152602001807f62616c616e63657300000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561350057600080fd5b505af1158015613514573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff166331afac368c846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156135d35780820151818401526020810190506135b8565b50505050905090810190601f1680156136005780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561362057600080fd5b505af1158015613634573d6000803e3d6000fd5b505050506040513d602081101561364a57600080fd5b8101908080519060200190929190505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561371c578082015181840152602081019050613701565b50505050905090810190601f1680156137495780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561376957600080fd5b505af115801561377d573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba748486016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260088152602001807f62616c616e63657300000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561382b57600080fd5b505af115801561383f573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff166331afac368d836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156138fe5780820151818401526020810190506138e3565b50505050905090810190601f16801561392b5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561394b57600080fd5b505af115801561395f573d6000803e3d6000fd5b505050506040513d602081101561397557600080fd5b810190808051906020019092919050505050600098505b5b6139b6565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff98505b7f62e5cb94dfff5f0944cb698dd35036c97573ed057330cea53d58009cd631bbf7896040518082815260200191505060405180910390a188995050505050505050505092915050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c9856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613a91578082015181840152602081019050613a76565b50505050905090810190601f168015613abe5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015613add57600080fd5b505af1158015613af1573d6000803e3d6000fd5b505050506040513d6020811015613b0757600080fd5b810190808051906020019092919050505090508092505050919050565b600061100190508073ffffffffffffffffffffffffffffffffffffffff166356004b6a8585856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015613bbd578082015181840152602081019050613ba2565b50505050905090810190601f168015613bea5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015613c23578082015181840152602081019050613c08565b50505050905090810190601f168015613c505780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015613c89578082015181840152602081019050613c6e565b50505050905090810190601f168015613cb65780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015613cd957600080fd5b505af1158015613ced573d6000803e3d6000fd5b505050506040513d6020811015613d0357600080fd5b810190808051906020019092919050505050505050505600a165627a7a723058206df7387e2cebe4d22c054b957acd6ae18b01118437bc8ac25f5eb7a56728e44f0029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"lender\",\"type\":\"string\"},{\"name\":\"borrower\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"create_bill\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"show_balances\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"register_account\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"account_existance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lender\",\"type\":\"string\"},{\"name\":\"borrower\",\"type\":\"string\"}],\"name\":\"show_bill\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lender\",\"type\":\"string\"},{\"name\":\"borrower\",\"type\":\"string\"}],\"name\":\"remove_bill\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"register_account_event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"}],\"name\":\"create_bill_event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"}],\"name\":\"remove_bill_event\",\"type\":\"event\"}]";

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_CREATE_BILL = "create_bill";

    public static final String FUNC_SHOW_BALANCES = "show_balances";

    public static final String FUNC_REGISTER_ACCOUNT = "register_account";

    public static final String FUNC_ACCOUNT_EXISTANCE = "account_existance";

    public static final String FUNC_SHOW_BILL = "show_bill";

    public static final String FUNC_REMOVE_BILL = "remove_bill";

    public static final Event REGISTER_ACCOUNT_EVENT_EVENT = new Event("register_account_event", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Int256>(true) {}));
    ;

    public static final Event CREATE_BILL_EVENT_EVENT = new Event("create_bill_event", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVE_BILL_EVENT_EVENT = new Event("remove_bill_event", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected Asset(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Asset(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Asset(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Asset(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> create_bill(String lender, String borrower, BigInteger amount) {
        final Function function = new Function(
                FUNC_CREATE_BILL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(lender), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(borrower), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void create_bill(String lender, String borrower, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATE_BILL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(lender), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(borrower), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String create_billSeq(String lender, String borrower, BigInteger amount) {
        final Function function = new Function(
                FUNC_CREATE_BILL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(lender), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(borrower), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, BigInteger> getCreate_billInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATE_BILL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getCreate_billOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATE_BILL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> show_balances(String account) {
        final Function function = new Function(FUNC_SHOW_BALANCES, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> register_account(String account, BigInteger amount) {
        final Function function = new Function(
                FUNC_REGISTER_ACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void register_account(String account, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER_ACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String register_accountSeq(String account, BigInteger amount) {
        final Function function = new Function(
                FUNC_REGISTER_ACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getRegister_accountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER_ACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRegister_accountOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER_ACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<Boolean> account_existance(String account) {
        final Function function = new Function(FUNC_ACCOUNT_EXISTANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> show_bill(String lender, String borrower) {
        final Function function = new Function(FUNC_SHOW_BILL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(lender), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(borrower)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> remove_bill(String lender, String borrower) {
        final Function function = new Function(
                FUNC_REMOVE_BILL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(lender), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(borrower)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void remove_bill(String lender, String borrower, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE_BILL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(lender), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(borrower)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String remove_billSeq(String lender, String borrower) {
        final Function function = new Function(
                FUNC_REMOVE_BILL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(lender), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(borrower)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getRemove_billInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE_BILL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRemove_billOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE_BILL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<Register_account_eventEventResponse> getRegister_account_eventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTER_ACCOUNT_EVENT_EVENT, transactionReceipt);
        ArrayList<Register_account_eventEventResponse> responses = new ArrayList<Register_account_eventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Register_account_eventEventResponse typedResponse = new Register_account_eventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerregister_account_eventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REGISTER_ACCOUNT_EVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerregister_account_eventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REGISTER_ACCOUNT_EVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<Create_bill_eventEventResponse> getCreate_bill_eventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATE_BILL_EVENT_EVENT, transactionReceipt);
        ArrayList<Create_bill_eventEventResponse> responses = new ArrayList<Create_bill_eventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Create_bill_eventEventResponse typedResponse = new Create_bill_eventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registercreate_bill_eventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATE_BILL_EVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registercreate_bill_eventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATE_BILL_EVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<Remove_bill_eventEventResponse> getRemove_bill_eventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVE_BILL_EVENT_EVENT, transactionReceipt);
        ArrayList<Remove_bill_eventEventResponse> responses = new ArrayList<Remove_bill_eventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Remove_bill_eventEventResponse typedResponse = new Remove_bill_eventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerremove_bill_eventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REMOVE_BILL_EVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerremove_bill_eventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REMOVE_BILL_EVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static Asset load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Asset(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Asset load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Asset(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Asset load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Asset(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Asset load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Asset(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Asset> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Asset.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Asset> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Asset.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Asset> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Asset.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Asset> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Asset.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Register_account_eventEventResponse {
        public Log log;

        public byte[] account;

        public BigInteger amount;

        public BigInteger ret_code;
    }

    public static class Create_bill_eventEventResponse {
        public Log log;

        public BigInteger ret_code;
    }

    public static class Remove_bill_eventEventResponse {
        public Log log;

        public BigInteger ret_code;
    }
}
